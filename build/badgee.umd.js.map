{"version":3,"sources":["../src/filter.js","../src/utils.js","../src/console.js","../src/config.js","../src/styles.js","../src/badgee.js"],"names":["isFiltered","str","const","isntIncluded","filter","include","test","isExcluded","exclude","noop","each","items","fn","i","_extend","dest","obj","clone","extend","console","this","methods","unformatableMethods","eachFormatableMethod","eachUnformatableMethod","eachMethod","method","defaults","enabled","styled","config","configure","conf","store","defaultsStyle","border-radius","padding","margin","color","styles","style","name","Object","keys","stringForStyle","res","k","push","join","empty","black","background","argsForBadgee","label","parentName","let","args","parent","badgee","formatedLabel","_defineMethods","ref","bind","apply","concat","Badgee","prototype","define","redefineMethodsForAllBadges","b","defaultStyle","get","onFilterChange","none","matcher","log","e"],"mappings":"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","file":"badgee.umd.js","sourcesContent":["const filter = {\n  include : null,\n  exclude : null\n};\n\nexport function isFiltered(str) {\n  const isntIncluded = (filter.include != null) && !filter.include.test(str);\n  const isExcluded = (filter.exclude != null) && filter.exclude.test(str);\n  return isntIncluded || isExcluded\n}\n\nexport function getFilter(onFilterChange) {\n  return {\n    none() {\n      filter.include = null\n      filter.exclude = null\n\n      onFilterChange()\n      return this;\n    },\n\n    include(matcher = null) {\n      if (matcher !== filter.include) {\n        filter.include = matcher;\n        onFilterChange()\n      }\n      return this;\n    },\n\n    exclude(matcher = null) {\n      if (matcher !== filter.exclude) {\n        filter.exclude = matcher;\n        onFilterChange();\n      }\n      return this;\n    }\n  };\n}\n","export const noop = () => {}\n\nexport const each = (items, fn) => {\n  for (const i in items) {\n    fn(items[i], i)\n  }\n}\n\nconst _extend = (dest, obj) => {\n  for (const i in obj) dest[i] = obj[i]\n  return dest\n}\nexport const clone = (obj) => _extend({}, obj)\nexport const extend = (dest, obj) => _extend(clone(dest), obj)\n","import { noop, each } from './utils.js'\n// Homogeneisation of the console API on different browsers\n//  - add compat console object if not available\n//  - some methods might not be defined. fake them with `noop` function\n\nconst console = this.console || {};\n\n// For the record, every single console methods and properties :\n// [\"memory\", \"exception\", \"debug\", \"error\", \"info\", \"log\", \"warn\", \"dir\",\n// \"dirxml\", \"table\", \"trace\", \"assert\", \"count\", \"markTimeline\", \"profile\",\n// \"profileEnd\", \"time\", \"timeEnd\", \"timeStamp\", \"timeline\", \"timelineEnd\",\n// \"group\", \"groupCollapsed\", \"groupEnd\", \"clear\"]\n//\n// Focus on logging methods and ignore profiling/timeline methods or less used methods\nconst methods             = ['debug', 'error', 'group', 'groupCollapsed', 'info', 'log', 'warn'];\nconst unformatableMethods = ['clear', 'dir', 'groupEnd'];\n\nexport const eachFormatableMethod   = (fn) => { each(methods, fn) }\nexport const eachUnformatableMethod = (fn) => { each(unformatableMethods, fn) }\nexport const eachMethod = (fn) => {\n  eachFormatableMethod(fn)\n  eachUnformatableMethod(fn)\n}\n\neachMethod((method) => {\n  console[method] = console[method] || noop;\n})\n\nexport default console\n","import { clone, extend } from './utils';\n\n// default configuration\nconst defaults = {\n  enabled : true,\n  styled  :  true\n};\n\nlet config = clone(defaults);\n\nconst configure = function(conf) {\n  // update conf\n  if (typeof conf === 'object') {\n    config = extend(defaults, conf);\n  }\n\n  // return current conf\n  return config;\n};\n\n// export default configure\nexport { config, configure }\n","import { each, extend } from './utils';\n\n// Create store to save styles\nconst store = {};\n\n// Default properties for styles\nlet defaultsStyle = {\n  'border-radius': '2px',\n  'padding'      : '1px 3px',\n  'margin'       : '0 1px',\n  'color'        : 'white'\n};\n\nconst styles = {\n  // define a new style or list existing ones\n  style(name, style) {\n    if (name != null && style != null) {\n      style = extend(defaultsStyle, style);\n      store[name] = style;\n    }\n    else if (name != null) {\n      return store[name];\n    }\n    return Object.keys(store);\n  },\n\n  defaults(style) {\n    if (style != null) {\n      defaultsStyle = style;\n    }\n    return defaultsStyle;\n  },\n\n  stringForStyle(name) {\n    const res = []\n    each(store[name], (style, k) => {\n      res.push(`${k}:${style};`)\n    })\n    return res.join('');\n  }\n};\n\n\n// define a few styles\nconst empty = {};\nconst black = {'color': 'black'};\n\nstyles.style('green',   extend(empty, {'background': 'green'}));\nstyles.style('red',     extend(empty, {'background': 'red'}));\nstyles.style('orange',  extend(black, {'background': 'orange'}));\n\n\nexport default styles;\n","/* eslint-disable no-console */\n/*! badgee v1.2.0 - MIT license */\nimport { noop, extend, each } from './utils.js'\nimport console, {\n  eachMethod, eachFormatableMethod, eachUnformatableMethod\n} from './console.js'\nimport { config, configure } from './config.js';\nimport styles from './styles.js';\nimport { getFilter, isFiltered } from './filter.js';\n\nconst store = {};\n\n// Given a label, style and parentName, generate the full list of arguments to\n// pass to console method to get a foramted output\nconst argsForBadgee = function(label, style, parentName) {\n  let args = [];\n\n  if (!config.styled) { style = false; }\n  if (parentName) {\n    const parent = store[parentName];\n    args = argsForBadgee(parent.badgee.label, parent.style, parent.parent);\n  }\n\n  if (label) {\n    // concat formated label for badges output\n    // (i.e. \"%cbadge1%cbadge2\" with style or \"[badge1][badge2] without style\")\n    const formatedLabel = !style ? `[${label}]` : `%c${label}`\n    args[0] = `${args[0] || ''}${formatedLabel}`\n  }\n\n  if (style) {\n    args.push(styles.stringForStyle(style));\n  }\n\n  return args;\n};\n\n// Define Badgee methods form console object\n// Intended to be called in a 'Badgee' instance context (e.g. with 'bind()')\nconst _defineMethods = function(style, parentName) {\n  // get arguments to pass to console object\n  const args = argsForBadgee(this.label, style, parentName);\n\n  if (!config.enabled || isFiltered(args[0])) {\n    // disable everything\n    eachMethod((method) => this[method] = noop)\n    return\n  }\n\n  // Define Badgee 'formatable' methods form console object\n  eachFormatableMethod((method) => {\n    this[method] = console[method].bind(console, ...args);\n  })\n\n  // Define Badgee 'unformatable' methods form console object\n  eachUnformatableMethod((method) => {\n    this[method] = console[method].bind(console);\n  })\n};\n\n// ==================================\n\nclass Badgee {\n\n  constructor(label, style, parentName) {\n    // Define Badgee methods form console object\n    this.label = label;\n    _defineMethods.bind(this, style, parentName)();\n\n    // Store instance for later reference\n    store[this.label] = {\n      badgee: this,\n      style,\n      parent: parentName\n    };\n  }\n\n  // Defines a new Badgee instance with @ as parent Badge\n  define(label, style) {\n    return new Badgee(label, style, this.label);\n  }\n}\n\n// ==================================\n\nconst redefineMethodsForAllBadges = () => {\n  each(store, (b) => {\n    _defineMethods.bind(b.badgee, b.style, b.parent)()\n  })\n}\n\n// Create public Badgee instance\nlet b = new Badgee;\n\n// Augment public instance with utility methods\nb.style = styles.style;\nb.defaultStyle  = styles.defaults;\nb.get = label => (store[label] || {}).badgee;\nb.filter = getFilter(redefineMethodsForAllBadges)\n\nb.config = function(conf) {\n  // when conf is updated, redefine every badgee method\n  if (conf) {\n    configure(conf)\n    redefineMethodsForAllBadges();\n  }\n  return config;\n};\n\n// Some browsers don't allow to use bind on console object anyway\n// fallback to default if needed\ntry {\n  b.log();\n} catch (e) {\n  b = extend(console, {\n    define       : () => b,\n    style        : b.style,\n    defaultStyle : b.defaultStyle,\n    filter       : b.filter,\n    get          : () => b,\n    config       : () => b.config,\n  });\n}\n\nexport default b;\n"]}